#!/data/data/com.termux/files/usr/bin/bash
#Created on Dec/2018
IFS=$'\n\t'
trap ctrl_c 2

if [ -d /data/data/com.termux/files/home/i-Haklab ]; then
	iHAKLAB=/data/data/com.termux/files/home/i-Haklab
elif [ -d /data/data/com.termux/files/home/storage/external-1/roothome/i-Haklab ]; then
        iHAKLAB=/data/data/com.termux/files/home/storage/external-1/roothome/i-Haklab
else
	chk-iHaklab
fi

source $iHAKLAB/.set/libexec/colors 
source $iHAKLAB/.set/var/variables
source $iHAKLAB/.set/functions/functions
ctrl_c() { k-boom;}
chk-Cuser

if [ "$CHECKROOT" = "root" ]; then
	LPORT=80
else
	LPORT=4546
fi
banner
if [ -z $1 ] || [ $1 = help ]; then
	Menu

elif [ $1 = list ]; then
	printf "$TOOL"

elif [ $1 = show ] && [ -z $2 ]; then
        printf "$R[w]─➤$W Argument show need an option\n"
elif [ $1 = show ] && [ $2 ]; then
	if [ "$README_TOOL" = $2 ]; then
		cat $iHAKLAB/.set/libexec/Readme/$2
		echo
	elif [ $2 = books ]; then
		cat $iHAKLAB/.set/libexec/Books/List | awk '{print $1,$2}'
		printf "$Y\n[?]─➤$W Type the book's number or press$R enter$W to exit\n"
		while read -p "[+]─➤ " ANSW && [ -z $ANSW ]; do
			exit
		done
		if [ ! -z $ANSW ]; then
			BOOK=$(cat -n $iHAKLAB/.set/libexec/Books/List | grep $ANSW | awk '{print $NF}')
			if [ ! -z $BOOK ]; then
				chk-mega
				megadl https://mega.nz/$BOOK
			else
				printf "$R[w]─➤$W Unable to locate option $ANSW\n"
				exit
			fi
		fi
	elif [ $2 = tutorials ]; then
		exec bash $iHAKLAB/.set/share/tutorials
	elif [ $2 = QG ]; then
		if [ -d $iHAKLAB/QuickGuides ]; then
			ls $iHAKLAB/QuickGuides
			printf "$Y\n[?]─➤$W Type QG name or press$R enter$W to exit\n"
			while read -p "[+]─➤ " ANSW && [ -z $ANSW ]; do
				exit
			done
			if [ -e $iHAKLAB/QuickGuides/$ANSW ]; then
				exec bash $iHAKLAB/QuickGuides/$ANSW
			else
				printf "$R[w]─➤$W Unable to locate QG $ANSW\n"
			fi
		else
			printf "$R[w]─➤$W Quick Guides was removed$R |$W please install it\n"
		fi
	elif [ $2 = games ]; then
		exec bash $iHAKLAB/.set/share/games $3 $@
	else
		printf "$R[w]─➤$W Unable to locate option $2\n"
	fi


elif [ $1 = install ] && [ -z $2 ]; then
	printf "$R[w]─➤$W Argument install need an option\n"
elif [ $1 = install ] && [ $2 ]; then
	TOOL=$(ls $iHAKLAB/.set/to-install/ | grep -iv .zip | grep $2)
	if [ "$TOOL" = $2 ]; then
		bash $iHAKLAB/.set/to-install/$TOOL
	else
		printf "$R[w]─➤$W Unable to locate tool $2\n"
		sleep 1
		printf "$G[i]─➤$W Trying with apptitude repositories . . .\n"
		sleep 1
		apt install $2 -y
	fi
	if [ $(ruby -v |cut -c 6-10) == "3.0.0" ] && [ -e $PREFIX/etc/apt/sources.list.d/abhacker.repo.list ];then
		printf "$Y[!]─➤$W downgrading ruby to 2.7.2..."
		yes|apt install ruby=2.7.2 >/dev/null 2>&1
		printf "$G DONE!!$W\n"
	fi


elif [ $1 = remove ] && [ -z $2 ]; then
        printf "$R[w]─➤$W Argument remove need an option\n"
elif [ $1 = remove ] && [ $2 ]; then
        TOOL=$(ls $iHAKLAB/.set/to-remove | grep -iv .zip | grep $2)
        if [ "$TOOL" = $2 ]; then
		bash $iHAKLAB/.set/to-remove/$TOOL
		k-boom
	elif [ -e $PREFIX/bin/$2 ]; then
		apt remove $2 -y
		apt autoremove -y
		k-boom
	else
		printf "$R[w]─➤$W Unable to locate tool/framework $2\n"
	fi


elif [ $1 = weechat ]; then
	if [ ! -e $PREFIX/bin/weechat ]; then
		apt install weechat -y
	fi
	printf "$Y\n   [!]->$W After start weechat type the next commands$Y <-[!]$Y\n/server add freenode chat.freenode.net/6697 -ssl -autoconnect\n    /set irc.server.freenode.autojoin #Ivam3byCinderella\n                   /connect freenode\n                  /nick your-nickname\n               /join #Ivam3byCinderella$G\n               $R[w]-> USE SOME VPN <-[w]$G\n\n                 Press enter to start$W\n"
	read enter
	weechat
	k-boom


elif [ $1 = root ]; then
	command -v proot > /dev/null || pkg install proot -y > /dev/null 
	proot -0 -w ~ $PREFIX/bin/fish


elif [ $1 = speedtest ]; then
	command -v python > /dev/null 2>&1 || apt install python -y /dev/null 2>&1
	command -v speedtest-cli > /dev/null 2>&1 || python -m pip install speedtest-cli /dev/null 2>&1
	printf "$Y[!]─➤$W Running speed test . . .$G\n"
	speedtest-cli --simple
	printf "$W"

elif [ $1 = update ]; then
	TMP_FILE=$(mktemp)
	curl https://raw.githubusercontent.com/ivam3/i-Haklab/master/.set/libexec/upgrade -o $TMP_FILE > /dev/null 2>&1
	RMONTH=$(grep "Modify" $TMP_FILE | cut -d "-" -f2)
	RDAY=$(grep "Modify" $TMP_FILE | cut -d "-" -f3)
	LMONTH=$(stat $iHAKLAB | grep Modify | awk '{print $2}' | cut -d "-" -f2)
	LDAY=$(stat $iHAKLAB | grep Modify | awk '{print $2}' | cut -d "-" -f3)

	if [ $LMONTH -eq $RMONTH ]; then
		if [ $LDAY -gt $RDAY ]; then
			printf "$G\n[i]─➤$W Already up to date$G <-[i]$W\n"
		else
			printf "$Y[!]─➤$W Upgrading (It could take a while) ...\n"
			rm -rf $iHAKLAB > /dev/null 2>&1
			while [ ! -d $iHAKLAB ]; do
				git clone https://github.com/Ivam3/i-Haklab.git $iHAKLAB > /dev/null 2>&1
			done
			if [ -d $iHAKLAB ]; then
				bash $TMP_FILE
				printf "$G\n[i]─>$W Already up to date$G <-[i]$W\n"
			else
				ctrl_c
			fi
		fi
	elif [ $LMONTH -gt $RMONTH ]; then
		printf "$G\n[i]->$W Already up to date$G <-[i]$W\n"
	else
		printf "$Y[!]─➤$W Upgrading (It could take a while) ...\n"
		rm -rf $iHAKLAB > /dev/null 2>&1
		while [ ! -d $iHAKLAB ]; do
			git clone https://github.com/Ivam3/i-Haklab.git $iHAKLAB > /dev/null 2>&1
		done
		if [ -d $iHAKLAB ]; then
			bash $TMP_FILE
			printf "$G\n[i]->$W Already up to date$G <-[i]$W\n"
		else
			ctrl_c
		fi
	fi
	rm $TMP_FILE


elif [ $1 = restore ]; then
	printf "$Y[!]─➤$W Restoring (It could take a while) ...\n"
        rm -rf $iHAKLAB > /dev/null 2>&1
	while [ ! -d $iHAKLAB ]; do
		git clone https://github.com/Ivam3/i-Haklab.git $iHAKLAB > /dev/null 2>&1
        done
        if [ -d $iHAKLAB ]; then
		printf "$G[*]─➤$W DONE!!\n"
        else
		ctrl_c
        fi


elif [ $1 = reinstall ]; then
	if [ -e $iHAKLAB/.set/libexec/reinstall ]; then
		bash $iHAKLAB/.set/libexec/reinstall
	else
		printf "$R\n[w]─➤ Fatal error\n$Y[!] please run$G i-Haklab restore$Y and try again$W\n"
		exit
	fi


elif [ $1 = version ]; then
	cat $iHAKLAB/README.md | grep -o v.*.*.9 | awk '{print $1}'


elif [ $1 = share ] && [ -z $2 ]; then
	printf "$R[w]─➤$W Argument share need an option\n"
elif [ $1 = share ] && [ $2 ] && [ -z $3 ]; then
	if [ $2 = upload ]; then
		printf "$R[w]─➤$W specify a file to share\n"
	elif [ $2 = download ]; then 
		printf "$R[w]─➤$W specify file link\n"
	else
		ctrl_c
	fi
elif [ $1 = share ] && [ $2 ] && [ $3 ]; then
	chk-ffsend
	bash $iHAKLAB/.set/share/share ${@:2}


elif [ $1 = apk ] && [ -z $2 ]; then
	printf "$R[w]─➤$W Argument apk need an option\n"
elif [ $1 = apk ] && [ $2 ]; then
	if [ $2 = inlan ]; then
		chk-msf
		bash $iHAKLAB/.set/share/apk_inlan
	elif [ $2 = outlan ] && [ -z $3 ]; then
		printf "$R[w]─➤$W Argument outlan need a server as an option"
	elif [ $2 = outlan ] && [ $3 ]; then
		chk-msf
		bash $iHAKLAB/.set/share/apk_outlan $3
	else
		printf "$R[w]─➤$W invalid option\n"
	fi


elif [ $1 = payexe ] && [ -z $2 ]; then
        printf "$R[w]─➤$W Argument payexe need an option\n"
elif [ $1 = payexe ] && [ $2 ]; then
        if [ $2 = inlan ]; then
                chk-msf
		bash $iHAKLAB/.set/share/payexe_inlan
	elif [ $2 = outlan ] && [ -z $3 ]; then
		printf "$R[w]─➤$W Argument outlan need a server as an option"
	elif [ $2 = outlan ] && [ $3 ]; then
		chk-msf
		bash $iHAKLAB/.set/share/payexe_outlan $3
	else
                printf "$R[w]─➤$W invalid option\n"
        fi


elif [ $1 = paylink ] && [ -z $2 ]; then
	printf "$R[w]─➤$W Argument paylink need an option and target\n"
elif [ $1 = paylink ] && [ $2 = pc ] && [ -z $3 ]; then
	printf "$R[w]─➤$W Option pc need a target\n"
elif [ $1 = paylink ] && [ $2 = pc ] && [ $3 ]; then
	bash $iHAKLAB/.set/share/paylink_pc $2 $3
elif [ $1 = paylink ] && [ $2 = nexam ] && [ -z $3 ]; then
        printf "$R[w]─➤$W Option nexam need a target\n"
elif [ $1 = paylink ] && [ $2 = nexam ] && [ $3 ]; then
	bash $iHAKLAB/.set/share/paylink_nexam $2 $3
elif [ $1 = paylink ] && [ $2 = soa5 ]; then
	bash $iHAKLAB/.set/share/paylink_soa5 $2


elif [ $1 = forwarding ] && [ -z $2 ]; then
	chk-ssh
	bash $iHAKLAB/.set/share/forwarding_default
elif [ $1 = forwarding ] && [ $2 ] && [ -z $3 ]; then
	chk-ssh
	bash $iHAKLAB/.set/share/forwarding_port $2
elif [ $1 = forwarding ] && [ $2 ] && [ $3 ]; then
	chk-ssh
	bash $iHAKLAB/.set/share/forwarding_dns $2 $3


elif [ $1 = handler ] && [ -z $2 ]; then
	printf "$R[w]─➤$W Argument handler need an option$R |$W use one of those:\n"
	if [ -d ~/java/handler ]; then
		ls ~/java/handler | grep .rc | sort
	else
		printf "$R[w]─➤$W The handler box is empty\n"
	fi
elif [ $1 = handler ] && [ $2 ]; then
	if [ -e ~/java/handler/$2 ]; then
		if [ $CHECKROOT = "root" ]; then
			banner
			chk-sudo
			chk-msf
			sudo msfconsole -q -r ~/java/handler/$2
		else 
			banner
			chk-msf
			msfconsole -q -r ~/java/handler/$2
		fi
	else
		printf "$R[w]─➤$W File $2 doesn't exist\n"
	fi


elif [ $1 = shodan ]; then
	chk-msf
	bash $iHAKLAB/.set/share/shodan


elif [ $1 = paypdf ] && [ -z $2 ]; then
	printf "$R[w]─➤$W Argument paypdf need a pdf file name\n"
elif [ $1 = paypdf ] && [ $2 ]; then
	chk-msf
	bash $iHAKLAB/.set/share/paypdf $2


elif [ $1 = bfmail ] && [ -z $2 ]; then
        printf "$R[w]─➤$W Argument bfmail need a mail/victim as option 1$G\n[ex]->$W i-Haklab bfmail victim@gmail.com passwords.txt"
elif [ $1 = bfmail ] && [ $2 ] && [ -z $3 ]; then
        printf "$R[w]─➤$W Argument bfmail need a passwords file as option 2$G\n[ex]->$W i-Haklab bfmail victim@hotmail.com passwords.txt"
elif [ $1 = bfmail ] && [ $2 ] && [ $3 ]; then
	bash $iHAKLAB/.set/share/bfmail $2 $3


elif [ $1 = bfftp ] && [ -z $2 ]; then
        printf "$R[w]─➤$W Argument bfftp need a users file as option 1$G\n[ex]->$W i-Haklab bfftp users.txt passwords.txt 0.0.0.0"
elif [ $1 = bfftp ] && [ $2 ] && [ -z $3 ]; then
        printf "$R[w]─➤$W Argument bfftp need a passwords file as option 2$G\n[ex]->$W i-Haklab bfftp users.txt passwords.txt 0.0.0.0"
elif [ $1 = bfftp ] && [ $2 ] && [ $3 ] && [ -z $4 ]; then
        printf "$R[w]─➤$W Argument bfftp need an ip/victim as option 3$G\n[ex]->$W i-Haklab bfftp users.txt passwords.txt 0.0.0.0"
elif [ $1 = bfftp ] && [ $2 ] && [ $3 ] && [ $4 ]; then
        if [ ! -e $2 ]; then
                printf "$R[w]─➤$W File for users not found"
        elif [ ! -e $3 ]; then
                printf "$R[w]─➤$W File for passwords not found"
        elif [ -e $2 ] && [ -e $3 ]; then
                printf "$R[w]─> USE SOME VPN <-[w]$W\n  press$G enter$W to start"
                read enter
		chk-hydra
                hydra -L $2 -P $3 $4 ftp
	else
		ctrl_c
        fi


#elif [ $1 = phishing ] && [ -z $2 ];then
#	printf "$R[w]─➤$W Argument phishing needs a website as an option1"
#elif [ $1 = phishing ] && [ $2 ] && [ -z $3 ]; then
#	printf "$R[w]─➤$W Argument phishing needs a redirection as an option2"
#elif [ $1 = phishing ] && [ $2 ] && [ $3 ]; then
#	bash $iHAKLAB/.set/share/phishing $2 $3


elif [ $1 = ESmsg ] && [ -z $2 ]; then
	printf "$R[w]─➤$W Argument ESmsg need an option"
elif [ $1 = ESmsg ] && [ $2 ]; then
	bash $iHAKLAB/.set/share/ESmsg $2

else
	printf "$R[w]─➤$W Invalid argument $1 $R|$W Use help as argument to main menu\n"
fi
#			@IVAM3
