#!/data/data/com.termux/files/usr/bin/bash
#CREADED ON April/2022 BY @IVAM3
#UPGRADED ON 2022/apr/01
trap ctrl_c 2
ctrl_c(){ printf "$Y\n   [¿] Need a help [?]$B\nTelegram : t.me/Ivam3_Bot$W\n";}

#:: VARIABLES ::#
IFS=$'\n\t'
iHDB="https://raw.githubusercontent.com/ivam3/i-Haklab/master/.set"
IbyCDB="https://raw.githubusercontent.com/ivam3/ivam3.github.io/master/master/installer"
G=`echo -en "\e[32m"`
R='\033[1;31m'
Y='\033[1;33m'
B='\033[1;34m'
M='\033[1;35m'
C='\033[1;36m'
W='\033[0m'

#:: TRAPS ::#
[[ ! $(id -u) -ne 0 ]] && { printf >&2 "$R\n(_➤) You need to be a common user$W\n";exit;}
StdErr(){ printf "$R(_➤)$W missing argument, type PyMiR -h for help\n";exit;}

#:: BANNER ::#
Chao-chao(){ printf "$Y\n[!]-> ::::::::::::::: DONE !! :::::::::::::::: <-[!]$G\n\tTo fix issues going to$B t.me/Ivam3_Bot$W\n";}

Banner(){
	if [[ ! -e $PREFIX/bin/lolcat ]]
	then
		yes|apt install ruby >/dev/null 2>/dev/null
		gem install lolcat >/dev/null 2>/dev/null
	fi
	printf "   ______   ____  __ _ ____\n  |  _ \ \ / /  \/  (_)  _ \ \n  | |_) \ V /| |  | | | |_) |\n  |  __/ | | | |\/| | |  _ <\n  |_|    |_| |_|  |_|_|_| \_\ \n#:Python Modules Issue Resolve:#\n #:::: @Ivam3byCinderella ::::#
"
}

usage() {
	printf "$B\n(USAGE)─➤$G PyMiR -t <[B|BASIC] [BL|BLAS] [L|LDFLAGS] [R|RUST] [S|SODIUM]>\n\t\t-p <[2|3]> -m <[name of modules]>$W\n\nOPTIONS :\n-t\tDetermines the type of installation, those could be :\n\t[B|BASIC]\tfor a basic type\n\t[BL|BLASS]\tswitching gcc compiler\n\t[L|LDFLAGS]\tforce installation to use libraries and system compiler\n\t[R|RUST]\tit use a rust compiler specifying Android as target platform\n\t[S|SODIUM]\tforce the installation to use the sodium decryptor\n-p\tDetermines the python version, those could be\n\t[3] for python3\n\t[2] for python2\n-m Specify the module(s) to install.\n\nExamples:\n\tfixer PyMiR -t BASIC -p 3 -m future\n\tfixer PyMiR -t S -p 2 -m colorama requests\n";exit
}

#::::: REQUERIMENTS :::::#
Requirements(){
	printf "$G(_➤)$W Installing requirements (It could take a while)...\n"
	for req in build-essential python python2 curl tar wget ruby clang make nodejs pkg-config openblas libgmp libmpc libmpc-static libmpfr libtool libxml2 libxml2-static libxml2-utils libxslt libxslt-static libsodium libsodium-static libjpeg-turbo libpng libzmq; do
		if [[ ! $(pkg list-installed 2>/dev/null|grep $req|awk -F "/" '{print $1}') ]]; then
			yes|apt install $req >/dev/null 2>/dev/null
		fi
	done
	printf "$G(_➤)$W Upgrading pip ...\n"
	$py -m pip --no-color --quiet --no-cache-dir install --upgrade pip 2>/dev/null
	$py -m pip --no-color --quiet --no-cache-dir install wheel 2>/dev/null
}

clear;Banner|lolcat
[[ $# -eq 0 ]] && usage
while getopts ":p:t:m:h" arg; do
	case ${arg} in
		p)
			if [[ $OPTARG -eq 2 ]]
			then 
				py=python2
			elif [[ $OPTARG -eq 3 ]]
			then
				py=python3
			else
				StdErr
			fi
			;;
		t) instaType=$OPTARG;;
		m) echo $OPTARG > ${TMPDIR}/requirements.tmp;;
		h) usage;;
		*) StdErr;;
	esac
done

[[ $# -lt 6 ]] && StdErr
Requirements
for module in $(cat ${TMPDIR}/requirements.tmp);do
	printf "$G(_➤)$W Installing module $module...\n"
	case ${module} in
		turtle)
			dir=$(mktemp -d)
			wget -q --tries=20 $iHDB/fix-tools/py_modules/turtle-0.0.2.tar.gz -O $dir/turtle-0.0.2.tar.gz
			if [[ $dir/turtle-0.0.2.tar.gz ]]
			then
				pushd $dir
				gunzip $dir/turtle-0.0.2.tar.gz
				if [[ $dir/turtle-0.0.2.tar ]]
				then
					tar -xvf turtle-0.0.2.tar
					if [[ -d $dir/turtle-0.0.2 ]]
					then
						sed 's|except ValueError, ve:|except (ValueError, ve):|g' -i $dir/turtle-0.0.2/setup.py
						$py -m pip install -e turtle-0.0.2
					fi
				fi
				popd
			fi
			rm -rf $dir
			;;
		electrum|opencv-python|asciinema|matplotlib|python-tkinter|numpy|scipy)
			if [[ $OPTARG = numpy ]] || [[ $OPTARG = scipy ]]
			then
				bash <(curl -fsSL "https://its-pointless.github.io/setup-pointless-repo.sh")
			fi
			printf "$G(_➤)$W Installing modules (It could take a while)...\n"
			apt install $OPTARG >/dev/null 2>/dev/null
			;;
		*)
			case ${instaType} in
				B|BASIC|Basic|basic)
					$py -m pip --no-color --quiet --no-cache-dir install ${TMPDIR}/requirements.tmp 2>/dev/null
					Chao-chao
					;;
				BL|BLAS|Blas|blas)
					export BLAS=$PREFIX/lib/libblas.so
					export LAPACK=$PREFIX/lib/liblapack.so
					export CC=clang
					export CPP=clang++
					$py -m pip --no-color --quiet --no-cache-dir install ${TMPDIR}/requirements.tmp 2>/dev/null
					;;
				L|LDFLAGS|ldflags)
					export LDFLAGS="-L/system/lib/ -lm -lcompiler_rt"
					$py -m pip --no-color --quiet --no-cache-dir install ${TMPDIR}/requirements.tmp --global-option="build_ext" --global-option="--disable-jpeg" 2>/dev/null
					Chao-chao
					;;
				S|SODIOUM|Sodioum|sodioum)
					export SODIUM_INSTALL=system
					$py -m pip --no-color --quiet --no-cache-dir install --no-binary :all: ${TMPDIR}/requirements.tmp 2>/dev/null
					Chao-chao
					;;
				R|RUST|Rust|rust)
					yes|apt install rust >/dev/null 2>/dev/null
					export CARGO_BUILD_TARGET=$(rustc --version --verbose|sed -n 's|host: ||p')
					$py -m pip --no-color --quiet --no-cache-dir install ${TMPDIR}/requirements.tmp 2>/dev/null
					yes|apt remove rust >/dev/null 2>/dev/null
					Chao-chao
					;;
			esac
			;;
	esac
done

#                                               @Ivam3
